// controllers/productController.js
const Product = require("../models/product");
const Stock = require("../models/stock");
const Branch = require("../models/branch");
const Cost = require("../models/cost");
const productMapping = require("../services/productService");
const moment = require("moment");

async function getProductWithStocks(req, res) {
  try {
    const { id, slug } = req.params;
    const productId = parseInt(id); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∏—Å–ª–æ
    console.log("üöÄ ~ getProductWithStocks ~ productId:", productId);
    const productSlug = slug;
    console.log("üöÄ ~ getProductWithStocks ~ productSlug:", productSlug);
    const cityId = parseInt(req.query.city_id);
    console.log("üöÄ ~ getProductWithStocks ~ cityId:", cityId);

    // if (isNaN(productId) || isNaN(cityId)) {
    //   return res
    //     .status(400)
    //     .json({ error: "Invalid product ID or city ID format" });
    // }

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ _id
    let product = await Product.findOne({
      _id: productId,
      slug: productSlug,
      published: true,
    }).lean();
    if (!product) {
      return res.status(404).json({ error: "Product not found" });
    }
    delete product.locations;

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º
    const costsData = await Cost.findById(product.vendor_code).lean().exec();

    //–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ 1–°
    product.cost = 0;
    product.old_cost = 0;

    if (
      costsData &&
      Array.isArray(costsData.costs) &&
      costsData.costs.length > 0
    ) {
      product.cost =
        costsData.costs.find((item) => item.type === "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ú–∞–≥–∞–∑–∏–Ω").cost ||
        0;
      product.old_cost =
        costsData.costs.find((item) => item.type === "–†–†–¶").cost || 0;
    } else {
      return res.status(404).json({ error: "Not found costs" });
    }

    //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã —Ü–µ–Ω—ã –±—ã–ª–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ 1–° –∏ –Ω–µ 0
    if (product.cost === 0 || product.old_cost === 0) {
      Product.updateOne({ _id: productId }, { published: false });
      return res.status(404).json({ error: "costs is 0" });
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–æ–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º
    const stocks = await Stock.find({ product_guid: product.guid })
      .populate({
        path: "branchKey",
        match: { city_id: cityId },
      })
      .lean()
      .exec();

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∏–ª–∏–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç cityId
    const filteredStocks = stocks.filter((stock) => stock.branchKey);

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if (Array.isArray(filteredStocks) && filteredStocks.length > 0) {
      product.quality = filteredStocks.flatMap((item) => item.quality);
      product.availableForPurchase = true;
      //ToDo: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      product.availableForPurchaseFromDc = false;
    } else {
      product.availableForPurchase = false;
      //ToDo: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      product.availableForPurchaseFromDc = false;
    }

    // ToDo: –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    product.bank_coefficient = 12;
    product.bank_coefficient_month = "0,0833333333";
    product.bonus = null;

    //ToDo: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    product.hasAccessories = false;

    product.category = product.category?.guid || "";
    delete product.filter_specifications;

    if (Array.isArray(product.images) && product.images.length > 0) {
      let tempImages = [];
      product.images.map((e) =>
        tempImages.push(
          `${process.env.CDN_URL}/storage/products/images/big/${e.image}`
        )
      );
      product.images = tempImages;
    } else {
      product.images = [];
    }
    product.brand.image = `${process.env.CDN_URL}/storage/brands/small/${product.brand.image}`;
    product.model = product.model_id;

    //ToDo: –±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    if (product.availableForPurchase) {
      product.pickUpDate = `${moment().format("DD-MM-YYYY")}`;
    } else {
      product.pickUpDate = null;
    }

    product.specifications = product.primary_spec_values;
    delete product.primary_spec_values;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–∫–∞—Ö
    return res.status(200).json({ data: product });
  } catch (error) {
    console.error("Error fetching product with stocks:", error);
    return res
      .status(500)
      .json({ error: "Error fetching product with stocks" });
  }
}

module.exports = { getProductWithStocks };
